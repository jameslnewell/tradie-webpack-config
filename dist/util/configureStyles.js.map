{"version":3,"sources":["../../src/util/configureStyles.js"],"names":[],"mappings":";;;;;;kBAOe,UAAS,YAAT,EAAuB,aAAvB,EAAsC;AAAA,MAC5C,QAD4C,GACf,YADe,CAC5C,QAD4C;AAAA,MAClC,GADkC,GACf,YADe,CAClC,GADkC;AAAA,MAC7B,UAD6B,GACf,YADe,CAC7B,UAD6B;;;;;AAKnD,gBAAc,UAAd,GAA2B;AACzB,cAAU,kBAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAqB;;;AAG7B,UAAM,UAAU,SAAS,OAAT,GAAmB,GAAnB,GAAyB,eAAK,OAAL,CAAa,IAAb,CAAzC;;;AAGA,6BAAQ,GAAR,EAAa;;AAEX,wBAFW;AAGX,8BAHW;;;;AAOX,qBAPW,yBAOG,GAPH,EAOQ;;AAEjB,qBAAW,OAAX,CAAmB,eAAO;AACxB,gBAAI,cAAY,GAAZ,CAAJ,EAAwB;AACtB,kBAAI,IAAJ,GAAW,cAAY,GAAZ,CAAX;AACD;AACF,WAJD;;AAMA,cAAI,CAAC,IAAI,IAAT,EAAe;AACb,gBAAI,IAAJ,GAAW,IAAI,KAAf;AACD;;AAED,iBAAO,GAAP;AACD;AApBU,OAAb,EAsBG,UAAC,YAAD,EAAe,IAAf,EAAwB;;;AAGzB,YAAI,YAAJ,EAAkB;AAChB,iBAAO,KAAK,YAAL,CAAP;AACD,SAFD,MAEO,IAAI,eAAK,OAAL,CAAa,IAAb,MAAuB,MAA3B,EAAmC;;;AAGxC,iBAAO,aAAG,QAAH,CAAY,IAAZ,EAAkB,UAAC,SAAD,EAAY,IAAZ,EAAqB;AAC5C,gBAAI,SAAJ,EAAe;AACb,qBAAO,KAAK,SAAL,CAAP;AACD,aAFD,MAEO;AACL,qBAAO,KAAK,EAAC,UAAD,EAAO,UAAU,KAAK,QAAL,EAAjB,EAAL,CAAP;AACD;AACF,WANM,CAAP;AAQD,SAXM,MAWA;AACL,iBAAO,KAAK,EAAC,UAAD,EAAL,CAAP;AACD;AAEF,OA1CD;AA2CD;AAlDwB,GAA3B;;;;;;;AA0DA,gBAAc,MAAd,CAAqB,OAArB,CAA6B,IAA7B,CAAkC;AAChC,UAAM,0BAAW,UAAX,CAD0B;AAEhC,YAAQ,mCAAkB,OAAlB,CAA0B,OAA1B,EAAmC,CACzC,sBADyC,EAEzC,0BAFyC,EAGzC,8BAHyC,EAIzC,uBAJyC,CAAnC;AAFwB,GAAlC;AASA,gBAAc,OAAd,GAAwB,CACtB,4BAAa,EAAC,UAAU,CAAC,iBAAD,CAAX,EAAb;;AADsB,GAAxB;AAIA,gBAAc,OAAd,CAAsB,IAAtB,CACE,uCACE,WAAW,0BAAX,GAAwC,YAD1C,EAEE,EAAC,WAAW,IAAZ,EAFF,CADF;AAOD,C;;AA1FD;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA","file":"configureStyles.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport resolve from 'resolve';\nimport extToRegex from 'ext-to-regex';\nimport autoprefixer from 'autoprefixer';\nimport ExtractTextPlugin from 'extract-text-webpack-plugin';\n\nexport default function(tradieConfig, webpackConfig) {\n  const {optimize, src, extensions} = tradieConfig;\n\n  //import style modules like `sass-composer`:\n  // - resolve modules without the standard webpack prefix (`~`)\n  webpackConfig.sassLoader = {\n    importer: (url, prev, done) => {\n\n      //FIXME: pending https://github.com/jtangelder/sass-loader/issues/234\n      const basedir = prev === 'stdin' ? src : path.dirname(prev);\n\n      //resolve the module to a file\n      resolve(url, {\n\n        basedir,\n        extensions,\n\n        //look for the entry module under a few properties\n        // e.g. `main.scss` or `main.css`\n        packageFilter(pkg) {\n\n          extensions.forEach(ext => {\n            if (pkg[`main.${ext}`]) {\n              pkg.main = pkg[`main.${ext}`];\n            }\n          });\n\n          if (!pkg.main) {\n            pkg.main = pkg.style;\n          }\n\n          return pkg;\n        }\n\n      }, (resolveError, file) => {\n\n        //\n        if (resolveError) {\n          return done(resolveError);\n        } else if (path.extname(file) === '.css') {\n\n          //read the file contents so that CSS is treated as SCSS\n          return fs.readFile(file, (readError, data) => {\n            if (readError) {\n              return done(readError);\n            } else {\n              return done({file, contents: data.toString()});\n            }\n          });\n\n        } else {\n          return done({file});\n        }\n\n      });\n    }\n  };\n\n  //parse `require()`'d style files:\n  // - parse `@import`s in SASS\n  // - extract `url()`s in SASS\n  // - expand vendor prefixes with autoprefix\n  // - extract styles to a separate `*.css` file\n  webpackConfig.module.loaders.push({\n    test: extToRegex(extensions),\n    loader: ExtractTextPlugin.extract('style', [\n      'css-loader?sourceMap',\n      'postcss-loader?sourceMap',\n      'resolve-url-loader?sourceMap',\n      'sass-loader?sourceMap'\n    ])\n  });\n  webpackConfig.postcss = [\n    autoprefixer({browsers: ['last 2 versions']})\n    //NOTE: css-loader looks for NODE_ENV=production and performs minification so we don't need cssnano or similar here\n  ];\n  webpackConfig.plugins.push(\n    new ExtractTextPlugin(\n      optimize ? '[name].[contenthash].css' : '[name].css',\n      {allChunks: true}\n    )\n  );\n\n}\n"]}