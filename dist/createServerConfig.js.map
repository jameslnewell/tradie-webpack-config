{"version":3,"sources":["../src/createServerConfig.js"],"names":[],"mappings":";;;;;;;;kBAQwB,kB;;AARxB;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEe,SAAS,kBAAT,CAA4B,YAA5B,EAA0C;AAAA,MAChD,QADgD,GAC+D,YAD/D,CAChD,QADgD;AAAA,MACtC,GADsC,GAC+D,YAD/D,CACtC,GADsC;AAAA,MACjC,IADiC,GAC+D,YAD/D,CACjC,IADiC;AAAA,MACjB,OADiB,GAC+D,YAD/D,CAC3B,OAD2B,CACjB,OADiB;AAAA,MACc,eADd,GAC+D,YAD/D,CACP,MADO,CACE,UADF;AAAA,MACyC,kBADzC,GAC+D,YAD/D,CACgC,OADhC;;;AAGvD,MAAI,gBAAgB,+BAAgB,YAAhB,CAApB;;;AAGA,MAAM,UAAU,QAAQ,MAAR,CAAe,UAAC,KAAD,EAAQ,MAAR,EAAmB;;AAEhD,QAAM,UAAU,eAAK,OAAL,CAAa,MAAb,CAAhB;AACA,QAAM,WAAW,eAAK,QAAL,CAAc,MAAd,EAAsB,eAAK,OAAL,CAAa,MAAb,CAAtB,CAAjB;;;AAGA,QAAI,aAAa,QAAjB,EAA2B;AACzB,aAAO,KAAP;AACD;;AAED,wBACK,KADL,sBAEG,eAAK,IAAL,CAAU,OAAV,EAAmB,QAAnB,CAFH,EAEkC,MAFlC;AAKD,GAfe,EAeb,EAfa,CAAhB;;;AAkBA,8BAAa,EAAC,YAAY,eAAb,EAAb,EAA4C,aAA5C;;;AAGA,iCAAgB,EAAC,kBAAD,EAAhB,EAA4B,aAA5B;;;AAGA,+BACK,aADL;;AAGE,YAAQ,MAHV;AAIE,UAAM;AACJ,iBAAW,KADP;AAEJ,kBAAY;AAFR,KAJR;;;AAUE,aAAS,WAAW,YAAX,GAA0B,yBAVrC;;AAYE,WAAO,OAZT;AAaE,aAAS,GAbX;;AAeE,YAAQ;AACN,YAAM,IADA;AAEN,gBAAU,WAFJ;AAGN,qBAAe;AAHT,KAfV;;AAqBE,0CACK,cAAc,OADnB;;;AAIE,QAAI,kBAAQ,YAAZ,CACE,4CADF,EAEE,EAAC,KAAK,IAAN,EAAY,WAAW,IAAvB,EAFF,CAJF;;AArBF;;;AAmCA,kBAAgB,qBAAM,aAAN,EAAqB,kBAArB,CAAhB;;AAEA,SAAO,aAAP;AACD","file":"createServerConfig.js","sourcesContent":["import path from 'path';\nimport webpack from 'webpack';\n\nimport merge from './util/merge';\nimport ignoreStyles from './util/ignoreStyles';\nimport configureAssets from './util/configureAssets';\nimport createAppConfig from './util/createAppConfig';\n\nexport default function createServerConfig(tradieConfig) {\n  const {optimize, src, dest, scripts: {bundles}, styles: {extensions: styleExtensions}, webpack: extraWebpackConfig} = tradieConfig;\n\n  let webpackConfig = createAppConfig(tradieConfig);\n\n  //configure the server bundles\n  const entries = bundles.reduce((accum, bundle) => {\n\n    const dirname = path.dirname(bundle);\n    const basename = path.basename(bundle, path.extname(bundle));\n\n    //skip the server bundle\n    if (basename !== 'server') {\n      return accum;\n    }\n\n    return {\n      ...accum,\n      [path.join(dirname, basename)]: bundle\n    };\n\n  }, {});\n\n  //replace/ignore (S)CSS on the server - it doesn't get displayed\n  ignoreStyles({extensions: styleExtensions}, webpackConfig);\n\n  //assets\n  configureAssets({optimize}, webpackConfig);\n\n  //merge common and server config\n  webpackConfig = {\n    ...webpackConfig,\n\n    target: 'node',\n    node: {\n      __dirname: false,\n      __filename: false\n    },\n\n    //TODO: source-map-support only works with external maps - there is a PR to work with inline maps\n    devtool: optimize ? 'source-map' : 'cheap-module-source-map',\n\n    entry: entries,\n    context: src,\n\n    output: {\n      path: dest,\n      filename: '[name].js',\n      libraryTarget: 'commonjs'\n    },\n\n    plugins: [\n      ...webpackConfig.plugins,\n\n      //make error traces use source maps\n      new webpack.BannerPlugin(\n        'require(\\'source-map-support\\').install();',\n        {raw: true, entryOnly: true}\n      )\n\n    ]\n\n  };\n\n  //merge extra webpack config\n  webpackConfig = merge(webpackConfig, extraWebpackConfig);\n\n  return webpackConfig;\n}\n"]}